{"version":3,"sources":["components/Profile/ProfileInfo/Profileinfo.module.css","components/Profile/posts/Posts.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/Profileinfo.tsx","components/Profile/posts/post/Post.tsx","components/Profile/posts/AddPostForm.tsx","components/Profile/posts/Posts.tsx","components/Profile/posts/PostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","classes","onChange","e","currentTarget","autoFocus","onClick","updateStatus","onDoubleClick","isOwner","ContactElement","contactTitle","contactValue","href","target","ProfileData","profile","profileData","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","keys","some","el","map","key","ProfileInfo","logo","src","photos","large","defaultLogo","alt","description","fullName","to","settings","xmlns","xmlnsXlink","style","margin","background","display","width","height","viewBox","transform","d","Post","message","likes","reduxForm","form","addPost","onSubmit","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","PostsMemorized","React","memo","postItems","posts","id","postsBlock","values","post","connect","state","profilePage","postsData","addPostCreator","Posts","Profile","content","PostsContainer","Preloader","ProfileContainer","userId","this","match","params","mine","history","getProfile","getStatus","console","error","updateProfile","prevProps","Component","compose","auth","getProfileThunkCreator","getStatusThunkCreator","updateStatusThunkCreator","withRouter"],"mappings":"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","file":"static/js/3.5b0c7dd3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"Profileinfo_ProfileInfo__2rKLf\",\"logo\":\"Profileinfo_logo__iGagM\",\"profileData\":\"Profileinfo_profileData__15MxO\",\"contacts\":\"Profileinfo_contacts__cIRgW\",\"status\":\"Profileinfo_status__2w7Qr\",\"settings\":\"Profileinfo_settings__1nDfT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPost\":\"Posts_addPost__1nbsT\",\"posts\":\"Posts_posts__24Eqp\",\"postsBlock\":\"Posts_postsBlock__NOCs4\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {useState, useEffect, ChangeEvent} from \"react\";\r\nimport classes from \"./Profileinfo.module.css\";\r\n\r\ntype propsType = {\r\n    status: string\r\n    isOwner: boolean\r\n    updateStatus: (newStatus: string) => void\r\n}\r\nconst ProfileStatus:React.FC<propsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n    const editModeActive = () => {\r\n        setEditMode(true);\r\n    }\r\n    const editModeDeactivate = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e:ChangeEvent<HTMLTextAreaElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div className={classes.status}>\r\n            {editMode ?\r\n                <div><textarea onChange={onStatusChange} value={status} autoFocus={true}/>\r\n                    <button onClick={editModeDeactivate}>Save</button>\r\n                </div> :\r\n                <p onDoubleClick={() => props.isOwner && editModeActive()}>{props.status ? props.status : (props.isOwner ? \"Set your status\" : \"\")}</p>}\r\n        </div>\r\n\r\n    )\r\n\r\n};\r\nexport default ProfileStatus;\r\n","import React, {ReactElement} from \"react\";\r\nimport classes from \"./Profileinfo.module.css\";\r\nimport {profileContacts, profileType} from \"../../../redux/types/types\";\r\n\r\ntype propsType = {\r\n    profile: profileType\r\n}\r\nlet ProfileData:React.FC<propsType> = ({profile}) => (\r\n    <>\r\n        <div className={classes.profileData}>\r\n            {\r\n                profile.aboutMe &&\r\n                <p><b>About me:</b> {profile.aboutMe}</p>\r\n            }\r\n            <p><b>Looking for a job:</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}</p>\r\n            {profile.lookingForAJob &&\r\n            <p><b>What can I do:</b> {profile.lookingForAJobDescription}</p>\r\n            }\r\n\r\n        </div>\r\n        <div className={classes.contacts}>\r\n            {Object.keys(profile.contacts).some(el => profile.contacts[el as keyof profileContacts]) &&\r\n            <h3>Contacts:</h3>\r\n            }\r\n            <ul>\r\n                {Object.keys(profile.contacts).map(key => <ContactElement contactTitle={key}\r\n                                                                          contactValue={profile.contacts[key as keyof profileContacts ]}\r\n                                                                          key={key}/>)}\r\n            </ul>\r\n        </div>\r\n    </>\r\n\r\n)\r\ntype contElPropsType = {\r\n    contactTitle: string\r\n    contactValue:string\r\n}\r\nconst ContactElement:React.FC<contElPropsType> = ({contactTitle, contactValue}):any => {\r\n    if (!contactValue) {\r\n        return \"\"\r\n    }\r\n    return <li><b>{contactTitle}</b>: <a href={contactValue} target=\"_blank\">{contactValue} </a></li>\r\n\r\n\r\n}\r\nexport default ProfileData;\r\n","import React from \"react\";\r\nimport classes from \"./Profileinfo.module.css\";\r\nimport defaultLogo from \"../../../firstUser/User_Cyber_Spy.png\"\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport ProfileData from \"./ProfileData\";\r\nimport {profileType} from \"../../../redux/types/types\";\r\n\r\ntype propsType = {\r\n    profile: profileType\r\n    status: string\r\n    isOwner:boolean\r\n    updateStatus: (status:string) => void\r\n}\r\n\r\nlet ProfileInfo:React.FC<propsType> = (props) => {\r\n\r\n    return (\r\n        <div className={classes.ProfileInfo}>\r\n            <div className={classes.logo}>\r\n\r\n                <img src={props.profile.photos.large ? props.profile.photos.large : defaultLogo} alt=\"\"/>\r\n            </div>\r\n            <div className={classes.description}>\r\n                <ProfileStatus status={props.status} isOwner={props.isOwner} updateStatus={props.updateStatus}/>\r\n                <h2>{props.profile.fullName}</h2>\r\n                <ProfileData profile = {props.profile} />\r\n            </div>\r\n\r\n\r\n\r\n            {\r\n                //show settings gear if my page\r\n                props.isOwner &&\r\n                <NavLink to=\"settings\" className={classes.settings}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n                         style={{margin: \"auto\", background: \"transparent\", display: \"block\"}} width=\"30px\"\r\n                         height=\"30px\"\r\n                         viewBox=\"0 0 100 100\">\r\n                        <g transform=\"translate(50 50)\">\r\n                            <g>\r\n                                <path\r\n                                    d=\"M29.491524206117255 -5.5 L37.491524206117255 -5.5 L37.491524206117255 5.5 L29.491524206117255 5.5 A30 30 0 0 1 24.742744050198738 16.964569457146712 L24.742744050198738 16.964569457146712 L30.399598299691117 22.621423706639092 L22.621423706639096 30.399598299691114 L16.964569457146716 24.742744050198734 A30 30 0 0 1 5.5 29.491524206117255 L5.5 29.491524206117255 L5.5 37.491524206117255 L-5.499999999999997 37.491524206117255 L-5.499999999999997 29.491524206117255 A30 30 0 0 1 -16.964569457146705 24.742744050198738 L-16.964569457146705 24.742744050198738 L-22.621423706639085 30.399598299691117 L-30.399598299691117 22.621423706639092 L-24.742744050198738 16.964569457146712 A30 30 0 0 1 -29.491524206117255 5.500000000000009 L-29.491524206117255 5.500000000000009 L-37.491524206117255 5.50000000000001 L-37.491524206117255 -5.500000000000001 L-29.491524206117255 -5.500000000000002 A30 30 0 0 1 -24.742744050198738 -16.964569457146705 L-24.742744050198738 -16.964569457146705 L-30.399598299691117 -22.621423706639085 L-22.621423706639092 -30.399598299691117 L-16.964569457146712 -24.742744050198738 A30 30 0 0 1 -5.500000000000011 -29.491524206117255 L-5.500000000000011 -29.491524206117255 L-5.500000000000012 -37.491524206117255 L5.499999999999998 -37.491524206117255 L5.5 -29.491524206117255 A30 30 0 0 1 16.964569457146702 -24.74274405019874 L16.964569457146702 -24.74274405019874 L22.62142370663908 -30.39959829969112 L30.399598299691117 -22.6214237066391 L24.742744050198738 -16.964569457146716 A30 30 0 0 1 29.491524206117255 -5.500000000000013 M0 -20A20 20 0 1 0 0 20 A20 20 0 1 0 0 -20\"></path>\r\n                            </g>\r\n                        </g>\r\n                    </svg>\r\n                </NavLink>\r\n            }\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\n\r\ntype propsType = {\r\n    message: string\r\n    likes: number\r\n    id: number\r\n}\r\n\r\nlet Post: React.FC<propsType> = (props) => (\r\n  <div>\r\n    {props.message}{\" \"}\r\n    <div>\r\n      <button>like</button>\r\n      <span> {props.likes}</span>\r\n    </div>\r\n  </div>\r\n);\r\nexport default Post;\r\n","import classes from \"./Posts.module.css\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormControls\";\r\nimport {required} from \"../../../utilits/validators/validators\";\r\nimport React from \"react\";\r\nimport { addPostValuesType } from \"./Posts\";\r\n\r\ntype propsType = {\r\n\r\n}\r\nlet AddPostForm:React.FC<InjectedFormProps<addPostValuesType, propsType> & propsType> = (props) =>(\r\n    <form className={classes.addPost} onSubmit={props.handleSubmit} >\r\n        <p>Add post</p>\r\n        <Field component={Textarea} name=\"post\" validate = {[required]}\r\n               placeholder =\"Write your thoughts\"\r\n        />\r\n        <button>Add new</button>\r\n    </form>\r\n)\r\n\r\nexport default reduxForm<addPostValuesType, propsType>({form:\"addPost\"})(AddPostForm);\r\n","import React from \"react\";\r\nimport Post from \"./post/Post\";\r\nimport classes from \"./Posts.module.css\";\r\nimport AddPostForm from \"./AddPostForm\";\r\nimport {postDataType} from \"../../../redux/types/types\";\r\nexport type addPostValuesType = {\r\n    post:string\r\n}\r\ntype propsType = {\r\n    addPost: (post:string) => void\r\n    posts: Array<postDataType>\r\n}\r\nconst Posts:React.FC<propsType> = (props) => {\r\n    let postItems = props.posts.map((el) => (\r\n        <Post message={el.message} likes={el.likes} id={el.id} key={el.id}/>\r\n    ));\r\n\r\n    let addPost = (values:addPostValuesType) => {\r\n        props.addPost(values.post);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h2>my posts</h2>\r\n\r\n            <AddPostForm onSubmit={addPost}/>\r\n            <div className={classes.posts}>{postItems}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst PostsMemorized = React.memo(Posts);\r\nexport default PostsMemorized;\r\n","import React from \"react\";\r\nimport {\r\n    addPostCreator,\r\n} from \"../../../redux/profileReducer\";\r\nimport Posts from \"./Posts\";\r\nimport {connect} from \"react-redux\";\r\nimport {postDataType} from \"../../../redux/types/types\";\r\nimport {StateAppType} from \"../../../redux/store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<postDataType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (post: string) => void\r\n}\r\ntype PropsType = MapDispatchToPropsType & MapStateToPropsType;\r\n\r\nlet mapStateToProps = (state: StateAppType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.postsData,\r\n    };\r\n};\r\nexport default connect(mapStateToProps, {\r\n    addPost: addPostCreator\r\n})(Posts);\r\n","import React from \"react\";\r\nimport classes from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/Profileinfo\";\r\nimport PostsContainer from \"./posts/PostsContainer\";\r\nimport Preloader from \"../common/preloader/Preloader\";\r\nimport {profileType} from \"../../redux/types/types\";\r\n\r\ntype propsType = {\r\n    profile: profileType | null\r\n    status: string\r\n    isOwner:boolean\r\n    updateStatus: (status:string) => void\r\n    getProfile: (userId:number,mine:boolean) => void,\r\n    getStatus: (userId:number) => void\r\n}\r\n\r\nlet Profile:React.FC<propsType> = (props) => {\r\n    if(!props.profile){\r\n        return <Preloader />\r\n    }\r\n    return(\r\n\r\n        <div className={classes.content}>\r\n\r\n            <ProfileInfo isOwner = {props.isOwner}profile={props.profile} status = {props.status} updateStatus = {props.updateStatus}/>\r\n            {\r\n                props.isOwner &&\r\n                <PostsContainer/>\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfileThunkCreator, getStatusThunkCreator, updateStatusThunkCreator} from \"../../redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {StateAppType} from \"../../redux/store\";\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToPropsType = {\r\n    getProfile: (userId:number,mine:boolean) => void,\r\n    getStatus: (userId:number) => void\r\n    updateStatus: (status:string) => void\r\n}\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype propsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<PathParamType>;\r\nclass ProfileContainer extends React.Component<propsType> {\r\n    updateProfile() {\r\n        let userId:number | null = +this.props.match.params.userId;\r\n        let mine = false;\r\n        if (!userId) {\r\n            userId = this.props.id;\r\n            mine = true;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId){\r\n            console.error(\"ID must exist in query\")\r\n        } else{\r\n            this.props.getProfile(userId,mine);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps:propsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.updateProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} isOwner={!this.props.match.params.userId} />\r\n        );\r\n\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:StateAppType) => ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        id: state.auth.id,\r\n    }\r\n)\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getProfile: getProfileThunkCreator,\r\n        getStatus: getStatusThunkCreator,\r\n        updateStatus: updateStatusThunkCreator\r\n    }),\r\n    withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}